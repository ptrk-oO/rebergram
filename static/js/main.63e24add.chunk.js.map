{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAkEeA,MA7Df,aCOeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63e24add.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport './App.css';\nimport { Machine } from \"xstate\";\nimport { useMachine } from \"@xstate/react\";\n\nfunction App() {\nconst Light = () => {\nconst lightMachine = Machine({\n id: 'lightMachine',\n initial: 'green',\n context: {\n   updated: 0\n },\n states: {\n   green: {\n     on: {\n       yellow: {\n         target: 'yellow',\n         actions: 'updatedAction'\n       }\n     }\n   },\n   yellow: {\n     on: {\n       red: {\n         target: 'red',\n         actions: 'updatedAction'\n       }\n     }\n   },\n   red: {\n     on: {\n       GREEN: {\n         target: 'green',\n         actions: 'updatedAction'\n       }\n     }\n   }\n }\n});\nconst updatedAction: any = Object.assign({\n updated: (context: any, event: any) => context.updated + 1\n})\nconst [current, send] = useMachine(lightMachine, {\n actions: { updatedAction }\n});\nreturn (\n<div>\n<h1>Light traffic</h1>\n<h1>Updated: {current.context.updated} times</h1>\n{current.matches('green') ? (\n<div style={{ width: 60, height: 60, borderRadius: \"50%\", background: \"green\", marginTop: 10 }} />\n): null}\n{current.matches('yellow') ? (\n<div style={{ width: 60, height: 60, borderRadius: \"50%\", background: \"yellow\", marginTop: 10 }} />\n): null}\n{current.matches('red') ? (\n<div style={{ width: 60, height: 60, borderRadius: \"50%\", background: \"red\", marginTop: 10 }} />\n): null}\n<button disabled={!current.matches('green')} onClick={() => send('YELLOW')}>YELLOW</button>\n<button disabled={!current.matches('yellow')} onClick={() => send('RED')}>RED</button>\n<button disabled={!current.matches('red')} onClick={() => send('GREEN')}>GREEN</button>\n</div>\n);\n};\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}